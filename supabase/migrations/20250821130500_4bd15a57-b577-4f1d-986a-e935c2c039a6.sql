-- Create enums for controlled vocabularies
create type public.segmento as enum ('Empreiteiras', 'Engenharias', 'Arquitetura', 'Particular');
create type public.responsavel as enum ('Eng Civil', 'Mestre de Obras', 'Arquiteto', 'Outros');
create type public.estagio as enum ('Inicial', 'Intermediário', 'Final');
create type public.classificacao as enum ('Forte', 'Médio', 'Fraco');
create type public.followup_status as enum ('Retornou', 'Fechou pedido', 'Orçamento', 'Consulta preço', 'Sem retorno');
create type public.motivo_perda as enum ('Preço menor', 'Sem retorno', 'Produto em falta', 'Entrega', 'Edu não cobriu', 'Outros');

-- Create helper function for updated_at
create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Visitas table
create table if not exists public.visitas (
  id bigint generated by default as identity primary key,
  data date not null,
  endereco text not null,
  lat double precision,
  lng double precision,
  empresa text not null,
  segmento public.segmento not null,
  responsavel public.responsavel not null,
  estagio public.estagio not null,
  concorrencia text default '' not null,
  classificacao public.classificacao not null,
  contato text default '' not null,
  obs text default '' not null,
  fotos text[] not null default '{}',
  vendedor text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Followups table
create table if not exists public.followups (
  id bigint generated by default as identity primary key,
  visita_id bigint not null references public.visitas(id) on delete cascade,
  data date not null,
  status public.followup_status not null,
  valor numeric,
  motivo_perda public.motivo_perda,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Triggers for updated_at
create trigger set_visitas_updated_at
before update on public.visitas
for each row execute function public.set_updated_at();

create trigger set_followups_updated_at
before update on public.followups
for each row execute function public.set_updated_at();

-- Enable RLS and create permissive policies (public access for now)
alter table public.visitas enable row level security;
alter table public.followups enable row level security;

-- Policies: allow all operations to anon/authenticated (temporarily, until auth is added)
create policy "Public select visitas" on public.visitas for select using (true);
create policy "Public insert visitas" on public.visitas for insert with check (true);
create policy "Public update visitas" on public.visitas for update using (true);
create policy "Public delete visitas" on public.visitas for delete using (true);

create policy "Public select followups" on public.followups for select using (true);
create policy "Public insert followups" on public.followups for insert with check (true);
create policy "Public update followups" on public.followups for update using (true);
create policy "Public delete followups" on public.followups for delete using (true);

-- Optional: enable realtime (no harm if already enabled elsewhere)
alter table public.visitas replica identity full;
alter table public.followups replica identity full;
